{"version":3,"sources":["components/common/clock/clock.tsx","components/location/location.tsx","components/common/animatedCounter/animatedCounter.tsx","components/temperature/temperature.tsx","components/common/progressBar/progressBar.tsx","components/header/header.tsx","components/common/image/image.tsx","components/forecastCard/forecastCard.tsx","components/forecastList/forecastList.tsx","services/httpsService.js","services/openWeatherMapServices.js","utilities/settings.js","classes/openWeatherMapDay.ts","classes/openWeatherMapForecast.ts","classes/openWeatherMapWeather.ts","components/weatherApp/weatherApp.tsx","App.js","reportWebVitals.js","index.js"],"names":["Clock","clockIntervalID","state","getTime","time","places","String","padStart","Date","hours","parseInt","this","appendLeadingZero","getHours","minutes","getMinutes","seconds","getSeconds","setState","setTime","setInterval","clearInterval","className","decoration","React","Component","Location","Counter","countIntervalID","currentCount","prevProps","prevState","targetCount","props","setCountCheckInterval","newCurrentCount","Fragment","Temperature","apiRequestCount","temp","ProgressBar","progress","style","width","Header","refreshCount","pregressCount","paddingLeft","Image","src","title","alt","ForecastCard","day","forecast","getDayName","getTemperatureRounded","weatherIconUrl","getWeatherIconURL","weatherDescription","getWeatherDescription","renderWeatherIcon","renderWetherDescription","renderDayName","renderTemperature","renderWeatherDetails","ForecastList","weatherForecast","length","map","getDateTime","renderList","axios","defaults","baseURL","interceptors","response","use","error","status","console","log","Promise","reject","http","get","post","put","delete","axiosGetData","endPoint","axiosParams","params","q","units","APPID","process","OpenWeatherMapDay","data","main","weather","getTemperatureData","Math","round","getTemperature","dt","epochDate","moment","format","getWeatherData","icon","iconName","getWeatherIconName","description","OpenWeatherMapForecast","getForecastData","hasOwnProperty","list","forcastData","getForecastList","forecastFiveDayArray","maxTemp","dayCount","currentDay","add","endOf","unix","forEach","dayForecast","dateTime","OpenWeatherMapWeather","applicationRefreshRate","WeatherApp","weatherAppIntervalID","weatherForecastData","currentTemp","currentWeatherResponse","weatherForecastResponse","currentWeatherData","openWeatherMapDay","openWeatherMapUForecast","getFiveDayForecastData","newRefreshCount","newProgess","updateWeatherData","count","setReloadingCountDown","calculateProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0577b4f5.chunk.js","sourcesContent":["import React from 'react';\n\nimport \"src/components/common/clock/clock.scss\";\n\nexport interface ClockProps { }\n\nexport interface ClockState {\n    hours: number,\n    minutes: number,\n    seconds?: number,\n}\n\nclass Clock extends React.Component<ClockProps, ClockState> {\n\n    clockIntervalID: any;\n\n    state: ClockState = { ...this.getTime() }\n\n    appendLeadingZero(time: number, places: number) {\n\n        return String(time).padStart(places, '0')\n\n    }\n\n    getTime() {\n\n        const time = new Date();\n\n        return {\n            hours: parseInt(this.appendLeadingZero(time.getHours(), 2)),\n            minutes: parseInt(this.appendLeadingZero(time.getMinutes(), 2)),\n            seconds: parseInt(this.appendLeadingZero(time.getSeconds(), 2))\n        }\n\n    }\n\n    setTime() {\n\n        this.setState({ ...this.getTime() });\n\n    }\n\n    componentDidMount() {\n\n        this.setTime();\n\n        this.clockIntervalID = setInterval(() => {\n\n            this.setTime();\n\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.clockIntervalID);\n    }\n\n    decoration() {\n        return (\n            <div className=\"clock__decor\">\n                <span className=\"clock__decor-oval clock__decor-oval--light\"></span>\n                <span className=\"clock__decor-oval clock__decor-oval--half\"></span>\n                <span className=\"clock__decor-oval clock__decor-oval--full\"></span>\n            </div>\n        );\n    }\n\n    render() {\n\n        const { hours, minutes } = this.state;\n\n        return (\n            <div className=\"clock\">\n                <div className=\"clock__panel\">\n                    {this.decoration()}\n                    <span className=\"clock__time\">{hours}:{minutes} GMT</span>\n                    {this.decoration()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","import React from 'react';\n\nimport \"src/components/location/location.scss\";\n\n// TODO additional feature. convert to select element. allow user to select location\n\nexport interface LocationProps { }\n\nconst Location: React.FC<LocationProps> = () => {\n    return (\n        <div className=\"location\">\n            London\n        </div>\n    );\n}\n\nexport default Location;","import React from 'react';\n\ninterface CounterState {\n    currentCount: number\n}\n\ninterface CounterProps {\n    targetCount: number\n}\n\nclass Counter extends React.Component<CounterProps, CounterState>  {\n\n    countIntervalID: any;\n\n    state: CounterState = {\n        currentCount: 0,\n    }\n\n    componentDidUpdate(prevProps: CounterProps, prevState: CounterState) {\n\n        let { targetCount } = this.props;\n        let { currentCount } = this.state;\n\n        if (targetCount === currentCount && prevProps !== this.props) {\n\n            this.setState({ currentCount: 0 });\n            this.setCountCheckInterval();\n\n        } else if (targetCount === currentCount) {\n            clearInterval(this.countIntervalID);\n        }\n\n    }\n\n    setCountCheckInterval() {\n\n        this.countIntervalID = setInterval(() => {\n\n            let { targetCount } = this.props;\n            let { currentCount } = this.state;\n\n            if (currentCount < targetCount) {\n\n                let newCurrentCount = currentCount + 1;\n                this.setState({ currentCount: newCurrentCount });\n\n            } else if (currentCount > targetCount) {\n\n                let newCurrentCount = currentCount - 1;\n                this.setState({ currentCount: newCurrentCount });\n\n            }\n\n        }, 100);\n\n    }\n\n    componentDidMount() {\n        this.setCountCheckInterval();\n    }\n\n    render() {\n\n        const { currentCount } = this.state;\n\n        return <React.Fragment>{currentCount}</React.Fragment>\n    }\n}\n\nexport default Counter;","import React from 'react';\nimport Counter from 'src/components/common/animatedCounter/animatedCounter';\n\nexport interface TemperatureProps {\n    apiRequestCount: number,\n    temp: number\n}\n\nclass Temperature extends React.Component<TemperatureProps> {\n\n    shouldComponentUpdate(prevProps: TemperatureProps) {\n\n        const { apiRequestCount } = this.props;\n\n        if (apiRequestCount === prevProps.apiRequestCount) {\n            return false;\n        }\n\n        return true;\n    }\n\n    render() {\n\n        const { temp } = this.props;\n\n        return (<span className=\"temperature\"><Counter targetCount={temp} />&deg;</span>);\n    }\n\n}\n\nexport default Temperature;","import React from 'react';\n\nimport 'src/components/common/progressBar/progressBar.scss';\n\ntype ProgressBarProps = {\n    progress: number;\n};\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({ progress }) => {\n\n    return (\n        <div className=\"progress-bar\">\n            <div className=\"progress-bar__bar\">\n                <div className=\"progress-bar__progress\" style={{ width: `${progress}%` }}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default ProgressBar;","import React from 'react';\n\nimport Clock from \"src/components/common/clock/clock\";\nimport Location from \"src/components/location/location\";\nimport Temperature from \"src/components/temperature/temperature\";\nimport ProgressBar from 'src/components/common/progressBar/progressBar';\n\nimport \"src/components/header/header.scss\";\n\ninterface HeaderProps {\n    refreshCount: number,\n    pregressCount: number,\n    temp: number,\n    apiRequestCount: number\n}\n\nconst Header: React.FC<HeaderProps> = ({ refreshCount, pregressCount, temp, apiRequestCount }) => {\n    return (\n        <header className=\"header\">\n\n            <div className=\"header__top\">\n\n                <div className=\"header__clock\">\n                    <Clock />\n                </div>\n\n                <div className=\"header__stats\">\n                    <Location />\n                    <Temperature temp={temp} apiRequestCount={apiRequestCount} />\n                </div>\n            </div>\n\n            <div className=\"header__section\">\n                <span className=\"font-size-small\" style={{ paddingLeft: '5px' }}>Reloading in {refreshCount}s</span>\n                <ProgressBar progress={pregressCount} />\n            </div>\n\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\ninterface ImageProps {\n    src: string,\n    title: string\n}\n\nclass Image extends React.Component<ImageProps> {\n\n    render() {\n\n        const { src, title } = this.props;\n\n        if (src === '') {\n            return '';\n        }\n\n        return (\n            <img src={src} alt={title} />\n        );\n    }\n}\n\nexport default Image;\n","import React from 'react';\n\nimport Temperature from \"src/components/temperature/temperature\";\nimport Image from \"src/components/common/image/image\";\nimport OpenWeatherMapDay from 'src/classes/openWeatherMapDay';\n\nimport \"src/components/forecastCard/forecastCard.scss\";\n\nexport interface ForecastCardProps {\n    forecast: OpenWeatherMapDay,\n    apiRequestCount: number\n}\n\nclass ForecastCard extends React.Component<ForecastCardProps> {\n\n    renderDayName() {\n\n        const { forecast } = this.props;\n\n        const day: string = forecast.getDayName()\n\n        if (day === '') {\n            return '';\n        }\n\n        return (\n            <div className=\"forecast-card__day h3-font-size text-uppercase\">\n                {day}\n            </div>\n        );\n\n    }\n\n    renderTemperature() {\n\n        const { forecast, apiRequestCount } = this.props;\n\n        const temp = forecast.getTemperatureRounded();\n\n        if (!temp || !apiRequestCount) {\n            return '';\n        }\n\n        return (\n            <div className=\"forecast-card__temp h2-font-size text-uppercase\">\n                <Temperature temp={temp} apiRequestCount={apiRequestCount} />\n            </div>\n        );\n\n    }\n\n    renderWeatherIcon() {\n\n        const { forecast } = this.props;\n\n        const weatherIconUrl: string = forecast.getWeatherIconURL();\n        const weatherDescription: string = forecast.getWeatherDescription();\n\n        if (weatherIconUrl === '' || weatherDescription === '') {\n            return '';\n        }\n\n        return (\n            <div className=\"forecast-card__icon\">\n                <Image\n                    src={weatherIconUrl}\n                    title={weatherDescription}\n                />\n            </div>\n        );\n\n    }\n\n    renderWetherDescription() {\n\n        const { forecast } = this.props;\n\n        const weatherDescription: string = forecast.getWeatherDescription();\n\n        if (weatherDescription === '') {\n            return '';\n        }\n\n        return (\n            <p className=\"forecast-card__description h6-font-size text-uppercase\">\n                {weatherDescription}\n            </p>\n        );\n\n    }\n\n    renderWeatherDetails() {\n\n        const { forecast } = this.props;\n\n        const weatherIconUrl: string = forecast.getWeatherIconURL();\n        const weatherDescription: string = forecast.getWeatherDescription();\n\n        if (weatherIconUrl === '' || weatherDescription === '') {\n            return '';\n        }\n\n        return (\n            <div className=\"forecast-card__icon-wrapper\">\n                {this.renderWeatherIcon()}\n                {this.renderWetherDescription()}\n            </div>\n        );\n\n    }\n\n    render() {\n\n        return (\n            <div className=\"forecast-card\">\n                {this.renderDayName()}\n                {this.renderTemperature()}\n                {this.renderWeatherDetails()}\n            </div>\n        );\n    }\n}\n\nexport default ForecastCard;\n\n\n\n\n\n\n","import React from 'react';\n\nimport ForecastCard from 'src/components/forecastCard/forecastCard';\nimport OpenWeatherMapDay from 'src/classes/openWeatherMapDay';\n\nimport \"src/components/forecastList/forecastList.scss\";\n\n\nexport interface ForecastListProps {\n    apiRequestCount: number;\n    weatherForecast: OpenWeatherMapDay[]\n}\n\n\nclass ForecastList extends React.Component<ForecastListProps> {\n\n    shouldComponentUpdate(prevProps: ForecastListProps) {\n\n        const { apiRequestCount } = this.props;\n\n        if (apiRequestCount === prevProps.apiRequestCount) {\n            return false;\n        }\n\n        return true;\n    }\n\n    renderList() {\n\n        const { weatherForecast, apiRequestCount } = this.props;\n\n        if (!weatherForecast.length) {\n            return '';\n        }\n\n        return (\n            <div className=\"forecast-list\">\n                {weatherForecast.map((forecast) => <ForecastCard key={forecast.getDateTime()} forecast={forecast} apiRequestCount={apiRequestCount} />)}\n            </div>\n        );\n    }\n\n    render() {\n\n        return (\n            this.renderList()\n        )\n    }\n}\n\nexport default ForecastList;\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5';\n\naxios.interceptors.response.use(null, error => {\n\n    const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n\n    if (!expectedError) {\n        console.log(error);\n    }\n\n    return Promise.reject(error);\n\n});\n\n\nconst http = {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete,\n}\n\nexport default http","import axios from 'src/services/httpsService';\nimport { getOpenWeatherApiKey } from 'src/utilities/settings';\n\nconst APPID = getOpenWeatherApiKey();\n\nfunction axiosGetData(endPoint) {\n\n    const axiosParams = {\n        params: {\n            q: 'London,UK',\n            units: 'metric',\n            APPID: APPID\n        }\n    }\n\n    return axios.get(endPoint, axiosParams);\n}\n\nexport function getForecast() {\n    return axiosGetData('forecast');\n}\n\n\nexport function getWeather() {\n    return axiosGetData('weather');\n}","\nconst getApplicationRefreshRate = function () {\n    const refreshRate = process.env.REACT_APP_APPLICATION_REFRESH_RATE\n    return refreshRate ? parseInt(refreshRate) : 60;\n}\n\nconst getOpenWeatherApiKey = function () {\n    return process.env.REACT_APP_BASE_URL_OPEN_WEATHER_MAP_API_KEY;\n}\n\nexport {\n    getApplicationRefreshRate,\n    getOpenWeatherApiKey\n};","import moment from 'moment';\n\nimport { OpenWeatherMapCommon } from \"src/interfaces/openWeatherMapCommon\";\n\nclass OpenWeatherMapDay {\n\n    data: OpenWeatherMapCommon.Day;\n\n    constructor(data: OpenWeatherMapCommon.Day) {\n        this.data = data;\n    }\n\n    getTemperatureData(): OpenWeatherMapCommon.Main {\n\n        return this.data.main;\n\n    }\n\n    getWeatherData(): OpenWeatherMapCommon.Weather {\n\n        return this.data.weather[0];\n    }\n\n    getTemperature(): number {\n\n        const temperatureData: OpenWeatherMapCommon.Main = this.getTemperatureData();\n\n        return temperatureData.temp;\n\n    }\n\n    getTemperatureRounded(): number {\n\n        return Math.round(this.getTemperature());\n\n    }\n\n    getDateTime(): number {\n\n        return this.data.dt;\n\n    }\n\n    getDayName(): string {\n\n        const epochDate: number = this.getDateTime()\n\n        return moment(epochDate * 1000).format('ddd');\n\n    }\n\n\n    getWeatherIconName(): string {\n\n        const weatherData: OpenWeatherMapCommon.Weather = this.getWeatherData();\n\n        return weatherData.icon;\n\n    }\n\n    getWeatherIconURL(): string {\n\n        const iconName: string = this.getWeatherIconName();\n\n        return `http://openweathermap.org/img/wn/${iconName}.png`;\n\n    }\n\n    getWeatherDescription(): string {\n\n        const weatherData: OpenWeatherMapCommon.Weather = this.getWeatherData();\n\n        return weatherData.description;\n\n    }\n\n}\n\n\nexport default OpenWeatherMapDay","import moment from 'moment';\n\nimport { OpenWeatherMapCommon } from \"src/interfaces/openWeatherMapCommon\";\nimport { Forecast } from \"src/interfaces/openWeatherMapForecast\";\nimport OpenWeatherMapDay from 'src/classes/openWeatherMapDay';\n\n\nclass OpenWeatherMapForecast {\n\n    data: Forecast.Data;\n\n    constructor(data: Forecast.Response) {\n        this.data = this.getForecastData(data);\n    }\n\n    getForecastData(data: Forecast.Response): Forecast.Data {\n        return data.data;\n    }\n\n    getForecastList(): OpenWeatherMapCommon.Day[] {\n\n        // is this check required? isn't the interface already confirming this property exists?\n        if (!this.data.hasOwnProperty('list')) {\n            return [];\n        }\n\n        return this.data.list;\n\n    }\n\n    getFiveDayForecastData(): OpenWeatherMapDay[] {\n\n        const forcastData: OpenWeatherMapCommon.Day[] = this.getForecastList();\n\n        let forecastFiveDayArray: OpenWeatherMapDay[] = [];\n\n        let maxTemp: number = 0;\n        let dayCount: number = 0\n        let currentDay: number = moment().add(dayCount, 'day').endOf('day').unix();\n        const maxDays: number = 5\n        forcastData.forEach((forecast) => {\n\n            // limit forcast to 5 days\n            if (dayCount + 1 >= maxDays) {\n                return;\n            }\n\n            let dayForecast: OpenWeatherMapDay = new OpenWeatherMapDay(forecast);\n            let dateTime: number = dayForecast.getDateTime();\n            let temp: number = dayForecast.getTemperature();\n\n\n            // if dataset is for the next day. update dayCount and currentDay\n            if (dateTime > currentDay) {\n                dayCount++;\n                currentDay = moment().add(dayCount, 'day').endOf('day').unix();\n            }\n\n            // set data for day if not yet set\n            if (!forecastFiveDayArray[dayCount]) {\n                forecastFiveDayArray[dayCount] = dayForecast;\n                return;\n            }\n\n            if (temp > maxTemp) {\n                maxTemp = temp\n                forecastFiveDayArray[dayCount] = dayForecast;\n                return;\n            }\n\n        })\n\n        return forecastFiveDayArray;\n\n    }\n\n}\n\n\nexport default OpenWeatherMapForecast","import { OpenWeatherMapCommon } from \"src/interfaces/openWeatherMapCommon\";\nimport { Weather } from \"src/interfaces/openWeatherMapWeather\";\n\nclass OpenWeatherMapWeather {\n\n    static getWeatherData(data: Weather.Response): OpenWeatherMapCommon.Day {\n        return data.data;\n    }\n\n}\n\nexport default OpenWeatherMapWeather;","import React from 'react';\n\nimport { getApplicationRefreshRate } from 'src/utilities/settings';\nimport Header from 'src/components/header/header';\nimport ForecastList from 'src/components/forecastList/forecastList';\nimport { getForecast, getWeather } from 'src/services/openWeatherMapServices';\nimport OpenWeatherMapForecast from 'src/classes/openWeatherMapForecast';\nimport OpenWeatherMapWeather from 'src/classes/openWeatherMapWeather';\nimport OpenWeatherMapDay from 'src/classes/openWeatherMapDay';\n\nimport { OpenWeatherMapCommon } from 'src/interfaces/openWeatherMapCommon';\nimport { Weather } from 'src/interfaces/openWeatherMapWeather';\nimport { Forecast } from 'src/interfaces/openWeatherMapForecast';\n\nimport \"src/components/weatherApp/weatherApp.scss\";\n\nconst applicationRefreshRate = getApplicationRefreshRate();\n\nexport interface WeatherAppProps {\n\n}\n\nexport interface WeatherAppState {\n    apiRequestCount: number;\n    weatherForecastData: OpenWeatherMapDay[] | any[];\n    refreshCount: number;\n    pregressCount: number;\n    currentTemp: number;\n}\n\nclass WeatherApp extends React.Component<WeatherAppProps, WeatherAppState> {\n\n    weatherAppIntervalID: number = 0;\n\n    state: WeatherAppState = {\n        apiRequestCount: 0,\n        weatherForecastData: [],\n        refreshCount: applicationRefreshRate,\n        pregressCount: 0,\n        currentTemp: 0\n    }\n\n    async updateWeatherData() {\n\n        const currentWeatherResponse: Weather.Response = await getWeather();\n        const weatherForecastResponse: Forecast.Response = await getForecast();\n\n        // TODO the Weather Interface should work here?\n        const currentWeatherData: OpenWeatherMapCommon.Day = OpenWeatherMapWeather.getWeatherData(currentWeatherResponse)\n\n        const openWeatherMapDay = new OpenWeatherMapDay(currentWeatherData);\n        const openWeatherMapUForecast = new OpenWeatherMapForecast(weatherForecastResponse)\n\n        const { apiRequestCount } = this.state;\n\n        this.setState(\n            {\n                apiRequestCount: apiRequestCount + 1,\n                currentTemp: openWeatherMapDay.getTemperatureRounded(),\n                weatherForecastData: openWeatherMapUForecast.getFiveDayForecastData(),\n                refreshCount: applicationRefreshRate,\n                pregressCount: 0,\n            }\n        );\n    }\n\n    setReloadingCountDown() {\n\n        const { refreshCount } = this.state;\n\n        if (refreshCount > 0) {\n\n            const newRefreshCount = refreshCount - 1;\n            this.setState({\n                refreshCount: newRefreshCount\n            });\n            return;\n        }\n\n        this.setState({\n            refreshCount: applicationRefreshRate\n        })\n\n    }\n\n    calculateProgress() {\n\n        const { pregressCount, apiRequestCount } = this.state;\n\n        if (apiRequestCount === 0) {\n            return;\n        }\n\n        let newProgess = pregressCount + (1 / applicationRefreshRate);\n\n        if (newProgess > 100) {\n            newProgess = 0;\n        }\n\n        this.setState({\n            pregressCount: newProgess\n        });\n\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.weatherAppIntervalID);\n    }\n\n    async componentDidMount() {\n\n        this.updateWeatherData();\n\n        let count = 1;\n\n        setInterval(() => {\n\n            if (count % (applicationRefreshRate * 100) === 0) {\n\n                this.updateWeatherData();\n\n            } else if (count % 100 === 0) {\n\n                this.setReloadingCountDown();\n                this.calculateProgress();\n\n            } else if (count % 1 === 0) {\n\n                this.calculateProgress();\n\n            }\n\n            count++;\n\n        }, 10);\n\n    }\n\n\n    render() {\n\n        const {\n            currentTemp,\n            pregressCount,\n            refreshCount,\n            weatherForecastData,\n            apiRequestCount\n        } = this.state;\n\n        return (\n            <React.Fragment>\n\n                <Header\n                    temp={currentTemp}\n                    pregressCount={pregressCount}\n                    refreshCount={refreshCount}\n                    apiRequestCount={apiRequestCount}\n                />\n\n                <main>\n                    <ForecastList weatherForecast={weatherForecastData} apiRequestCount={apiRequestCount} />\n                </main>\n\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default WeatherApp;\n\n","import React, { Component } from 'react';\n\nimport WeatherApp from \"src/components/weatherApp/weatherApp\";\n\nclass App extends Component {\n\n    render() {\n\n        return (\n            <div className=\"app\">\n                <WeatherApp />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'src/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport \"normalize.css\";\nimport \"src/scss/style.scss\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}